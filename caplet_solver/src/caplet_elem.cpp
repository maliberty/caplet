/*
Created : Jul 31, 2010
Modified: Feb 14, 2013
Author  : Yu-Chung Hsiao
Email   : project.caplet@gmail.com
*/

/*
This file is part of CAPLET.

CAPLET is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

CAPLET is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the Lesser GNU General Public License
along with CAPLET.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "caplet_elem.h"

#include <cmath>
#include <iostream>

namespace caplet {

int init_atan_table(float* const tab,
                    int* const index_shift,
                    int* const man_shift)
{
  float factor;

  for (int i = 0; i < 256; i++) {
    int precision = 23 - man_shift[i];
    int range = 1 << precision;
    float step = 1.0f / (float) (1 << precision);

    float val = 1.0f + step / 2;

    int exp = i - 127;
    factor = pow(2, exp);

    for (int k = 0; k < range; k++) {
      int index = index_shift[i] + k;
      tab[index] = std::atan(val * factor);

      val += step;
    }
  }

  std::cout << "Initialized atan table." << std::endl;

  return 0;
}

float atan(float val)
{  // this is the atan5 version
  /* 1e-4 parameters: save some */
  //	static int			index_shift	[ 256 ] =
  //{0,4096,8192,12288,16384,20480,24576,28672,32768,36864,40960,45056,49152,53248,57344,61440,65536,69632,73728,77824,81920,86016,90112,94208,98304,102400,106496,110592,114688,118784,122880,126976,131072,135168,139264,143360,147456,151552,155648,159744,163840,167936,172032,176128,180224,184320,188416,192512,196608,200704,204800,208896,212992,217088,221184,225280,229376,233472,237568,241664,245760,249856,253952,258048,262144,266240,270336,274432,278528,282624,286720,290816,294912,299008,303104,307200,311296,315392,319488,323584,327680,331776,335872,339968,344064,348160,352256,356352,360448,364544,368640,372736,376832,380928,385024,389120,393216,397312,401408,405504,409600,413696,417792,421888,425984,430080,434176,438272,442368,446464,450560,454656,458752,462848,466944,471040,475136,479232,483328,487424,491520,495616,499712,503808,507904,512000,516096,518144,519168,519680,519936,520064,520128,520160,520176,520184,520188,520190,520192,520193,520194,520195,520196,520197,520198,520199,520200,520201,520202,520203,520204,520205,520206,520207,520208,520209,520210,520211,520212,520213,520214,520215,520216,520217,520218,520219,520220,520221,520222,520223,520224,520225,520226,520227,520228,520229,520230,520231,520232,520233,520234,520235,520236,520237,520238,520239,520240,520241,520242,520243,520244,520245,520246,520247,520248,520249,520250,520251,520252,520253,520254,520255,520256,520257,520258,520259,520260,520261,520262,520263,520264,520265,520266,520267,520268,520269,520270,520271,520272,520273,520274,520275,520276,520277,520278,520279,520280,520281,520282,520283,520284,520285,520286,520287,520288,520289,520290,520291,520292,520293,520294,520295,520296,520297,520298,520299,520300,520301,520302,520303,520304,520305,520306,520307,520308,520309};
  //	static int			man_shift	[ 256 ] =
  //{11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,13,14,15,16,17,18,19,20,21,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23};
  //	static float		tab			[520310];

  /* 1e-5 parameters: save little */
  static int index_shift[256] = {
      0,       32768,   65536,   98304,   131072,  163840,  196608,  229376,
      262144,  294912,  327680,  360448,  393216,  425984,  458752,  491520,
      524288,  557056,  589824,  622592,  655360,  688128,  720896,  753664,
      786432,  819200,  851968,  884736,  917504,  950272,  983040,  1015808,
      1048576, 1081344, 1114112, 1146880, 1179648, 1212416, 1245184, 1277952,
      1310720, 1343488, 1376256, 1409024, 1441792, 1474560, 1507328, 1540096,
      1572864, 1605632, 1638400, 1671168, 1703936, 1736704, 1769472, 1802240,
      1835008, 1867776, 1900544, 1933312, 1966080, 1998848, 2031616, 2064384,
      2097152, 2129920, 2162688, 2195456, 2228224, 2260992, 2293760, 2326528,
      2359296, 2392064, 2424832, 2457600, 2490368, 2523136, 2555904, 2588672,
      2621440, 2654208, 2686976, 2719744, 2752512, 2785280, 2818048, 2850816,
      2883584, 2916352, 2949120, 2981888, 3014656, 3047424, 3080192, 3112960,
      3145728, 3178496, 3211264, 3244032, 3276800, 3309568, 3342336, 3375104,
      3407872, 3440640, 3473408, 3506176, 3538944, 3571712, 3604480, 3637248,
      3670016, 3702784, 3735552, 3768320, 3801088, 3833856, 3866624, 3899392,
      3932160, 3964928, 3997696, 4030464, 4063232, 4096000, 4128768, 4145152,
      4161536, 4169728, 4173824, 4175872, 4176384, 4176640, 4176768, 4176832,
      4176864, 4176880, 4176896, 4176904, 4176908, 4176910, 4176911, 4176912,
      4176913, 4176914, 4176915, 4176916, 4176917, 4176918, 4176919, 4176920,
      4176921, 4176922, 4176923, 4176924, 4176925, 4176926, 4176927, 4176928,
      4176929, 4176930, 4176931, 4176932, 4176933, 4176934, 4176935, 4176936,
      4176937, 4176938, 4176939, 4176940, 4176941, 4176942, 4176943, 4176944,
      4176945, 4176946, 4176947, 4176948, 4176949, 4176950, 4176951, 4176952,
      4176953, 4176954, 4176955, 4176956, 4176957, 4176958, 4176959, 4176960,
      4176961, 4176962, 4176963, 4176964, 4176965, 4176966, 4176967, 4176968,
      4176969, 4176970, 4176971, 4176972, 4176973, 4176974, 4176975, 4176976,
      4176977, 4176978, 4176979, 4176980, 4176981, 4176982, 4176983, 4176984,
      4176985, 4176986, 4176987, 4176988, 4176989, 4176990, 4176991, 4176992,
      4176993, 4176994, 4176995, 4176996, 4176997, 4176998, 4176999, 4177000,
      4177001, 4177002, 4177003, 4177004, 4177005, 4177006, 4177007, 4177008,
      4177009, 4177010, 4177011, 4177012, 4177013, 4177014, 4177015, 4177016,
      4177017, 4177018, 4177019, 4177020, 4177021, 4177022, 4177023, 4177024};
  static int man_shift[256]
      = {8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
         8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
         8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
         8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
         8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
         8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
         8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
         9,  9,  10, 11, 12, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 23, 23, 23,
         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
         23, 23, 23, 23};
  static float tab[4177025];

  /* 1e-6 parameters: almost save nothing*/
  //	static int 			index_shift [ 256 ] =
  //{0,262144,524288,786432,1048576,1310720,1572864,1835008,2097152,2359296,2621440,2883584,3145728,3407872,3670016,3932160,4194304,4456448,4718592,4980736,5242880,5505024,5767168,6029312,6291456,6553600,6815744,7077888,7340032,7602176,7864320,8126464,8388608,8650752,8912896,9175040,9437184,9699328,9961472,10223616,10485760,10747904,11010048,11272192,11534336,11796480,12058624,12320768,12582912,12845056,13107200,13369344,13631488,13893632,14155776,14417920,14680064,14942208,15204352,15466496,15728640,15990784,16252928,16515072,16777216,17039360,17301504,17563648,17825792,18087936,18350080,18612224,18874368,19136512,19398656,19660800,19922944,20185088,20447232,20709376,20971520,21233664,21495808,21757952,22020096,22282240,22544384,22806528,23068672,23330816,23592960,23855104,24117248,24379392,24641536,24903680,25165824,25427968,25690112,25952256,26214400,26476544,26738688,27000832,27262976,27525120,27787264,28049408,28311552,28573696,28835840,29097984,29360128,29622272,29884416,30146560,30408704,30670848,30932992,31195136,31457280,31719424,31981568,32243712,32505856,32768000,33030144,33292288,33423360,33488896,33521664,33538048,33546240,33550336,33552384,33553408,33553920,33554176,33554304,33554368,33554400,33554416,33554424,33554428,33554430,33554431,33554432,33554433,33554434,33554435,33554436,33554437,33554438,33554439,33554440,33554441,33554442,33554443,33554444,33554445,33554446,33554447,33554448,33554449,33554450,33554451,33554452,33554453,33554454,33554455,33554456,33554457,33554458,33554459,33554460,33554461,33554462,33554463,33554464,33554465,33554466,33554467,33554468,33554469,33554470,33554471,33554472,33554473,33554474,33554475,33554476,33554477,33554478,33554479,33554480,33554481,33554482,33554483,33554484,33554485,33554486,33554487,33554488,33554489,33554490,33554491,33554492,33554493,33554494,33554495,33554496,33554497,33554498,33554499,33554500,33554501,33554502,33554503,33554504,33554505,33554506,33554507,33554508,33554509,33554510,33554511,33554512,33554513,33554514,33554515,33554516,33554517,33554518,33554519,33554520,33554521,33554522,33554523,33554524,33554525,33554526,33554527,33554528,33554529,33554530,33554531,33554532,33554533,33554534,33554535,33554536,33554537,33554538,33554539,33554540,33554541};
  //	static int 			man_shift   [ 256 ] =
  //{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23};
  //	static float		tab 		[ 33554542 ];

  static const bool falseVar = init_atan_table(tab, index_shift, man_shift) * 0;

  bool sign = (val > 0) ? falseVar : true;

  const int* const pVal = (const int*) (&val);
  const int exp = ((*pVal >> 23) & 255);

  if (sign) {
    return -tab[index_shift[exp] + ((*pVal & 0x7FFFFF) >> man_shift[exp])];
  } else {
    return tab[index_shift[exp] + ((*pVal & 0x7FFFFF) >> man_shift[exp])];
  }
}

int init_log_table(float* const table, const int precision)
{
  const int size = (1 << precision);
  const float step = 1.0f / (float) size;

  float val = 1.0f + (1.0f / (float) (1 << (precision + 1)));

  for (int i = 0; i < size; ++i) {
    table[i] = logf(val) / 0.69314718055995f;
    val += step;
  }
  std::cout << "Initialized  log table." << std::endl;

  return 0;
}

float log(const float val)
{
  static const int precision = 16;
  static const int comp_precision = 23 - precision;
  static float table[1 << precision];
  static const float dummyZero = 0 * init_log_table(table, precision);

  const int* const pVal = (const int*) (&val);

  return ((float) (((*pVal >> 23) & 255) - 127)
          + table[((*pVal & 0x7FFFFF) >> (comp_precision))])
             * 0.69314718055995f
         + dummyZero;
}

}  // namespace caplet
